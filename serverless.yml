service: Botframework-Serverless-Example
frameworkVersion: ">=1.1.0 <2.0.0"
plugins:
  - serverless-domain-manager
  - serverless-offline
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  region: ${opt:region, 'us-east-1'}
  environment:
    SERVICE_NAME: ${self:service}
    MICROSOFT_APP_ID: ${file(./secrets.json):MICROSOFT_APP_ID}
    MICROSOFT_APP_PASSWORD: ${file(./secrets.json):MICROSOFT_APP_PASSWORD}
    QNAKBID: ${file(./secrets.json):QNAKBID}
    QNABOTENDPOINTKEY: ${file(./secrets.json):QNABOTENDPOINTKEY}
    QNABOTHOST: ${file(./secrets.json):QNABOTHOST}
    BOTEMBEDCODEURL: ${file(./secrets.json):BOTEMBEDCODEURL}
custom:
  defaultStage: dev
  profiles:
    prod: prodProfile #aws profile names for prod to use in config
    staging: stagingProfile
    dev: devProfile
  stage: ${opt:stage, self:custom.defaultStage}
  domains:
    prod: ${file(./secrets.json):PROD_API_URL}
    staging: ${file(./secrets.json):STAGING_API_URL}
    dev: ${file(./secrets.json):DEV_API_URL}
  customDomain:
    basePath: ${file(./secrets.json):API_BASE_URL}
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true
functions:
  message:
    handler: src/index.message
    events:
      - http:
          path: messages
          method: post
          cors: true
  webchat:
    handler: src/webchat.chat
    events:
      - http:
          path: chat
          method: get
          cors: true
